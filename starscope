#! /usr/bin/env bash

## Main script of starscope
## check dependency and invoke nextflow pipeline

set -eo pipefail

## Fix nextflow version to 22.04.5
export NXF_VER="22.04.5"

## Generate starscope script path
## The solution is from:
## https://stackoverflow.com/questions/59895/how-can-i-get-the-source-directory-of-a-bash-script-from-within-the-script-itsel
SOURCE=${BASH_SOURCE[0]}
while [ -h "$SOURCE" ];
do # resolve $SOURCE until the file is no longer a symlink
    DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
    SOURCE=$(readlink "$SOURCE")
    [[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )

## set terminal output colors
## source: https://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux
BRed='\033[1;31m' # bold red color
BBlue='\033[1;34m' # bold blue color
On_Yellow='\033[43m' # background yellow color
NC='\033[0m' # No Color

echo_stderr(){
    echo $@ >&2
}

usage(){
    cat <<-EOF
	starscope uses starsolo and Seurat package as the core modules to process
	scRNA-seq data and generate a concise html report. The workflow was
	implemented by nextflow.
	
	Running pipeline:
	starscope <run> --conda \\
	                --input sampleList.csv \\
	                --genomeDir /path/to/STAR/reference/dir \\
	                --genomeGTF /path/to/genomeGTF \\
	                --whitelist /path/to/whitelist \\
	                --trimLength 28 \\
	                --soloCBstart 1 \\
	                --soloCBlen 29 \\
	                --soloUMIstart 30 \\
	                --soloUMIlen 10 \\
	                -bg
	
	Example input list (csv):
	sample,fastq_1,fastq_2
	sampleName,read1.fq.gz,/absolute/path/to/read2.fq.gz
	
	Making Reference:
	starscope <mkref> --conda \\
	                  --genomeFasta /path/to/genome/fasta \\
	                  --genomeGTF /path/to/genome/gtf \\
	                  --refoutDir reference_out_dir \\
	                  -bg
	
	starscope has four valid subcommands:
	    run:            run the scRNAseq analysis pipeline with nextflow
	    mkref:          prepare STAR reference
	    vdj_gex:        perform vdj+gex analysis
	    check_version:  check software versions
	
	Please use -h option following each subcommand to get detail
	of the options: e.g. starscope run -h
	EOF

    exit 0;
}

run_usage(){
    cat <<-EOF
	Basic Usage:
	============
	starscope <run> --conda \\
	                --input sampleList.csv \\
	                --genomeDir /path/to/STAR/reference/dir \\
	                --genomeGTF /path/to/genomeGTF \\
	                --whitelist /path/to/whitelist \\
	                --trimLength 28 \\
	                --soloCBstart 1 \\
	                --soloCBlen 29 \\
	                --soloUMIstart 30 \\
	                --soloUMIlen 10
	
	options:
	  --conda               Use conda env to run (true)
	  --docker              Use docker container to run
	  --input               Input sample list, csv format, required
	                        columns include "sample" for sampleName,
	                        "fastq_1" for read1, "fastq_2" for read2,
	                        and read1 is assumed to contain cell
	                        barcode.
	  --genomeDir           Path of STAR reference directory
	  --genomeGTF           Path of reference genome GTF file
	  --whitelist           Path of whitelist of barcodes
	  --trimLength          Min read length retained after cutadapt
	                        trimming (28)
	  --soloCBstart         Cell barcode start base in read1 (1)
	  --soloCBlen           Cell barcode length (29)
	  --soloUMIstart        UMI start base in read1 (30)
	  --soloUMIlen          UMI length (10)
	  --soloFeatures        Define whether only count UMI in exon region:
	                        Gene or GeneFull which includes both exon and
	                        intron reads (GeneFull)
	  --soloMultiMappers    Counting method for reads mapping to multiple genes:
	                        Unique or EM (Unique)
	  --soloStrand          Library strandness, Forward for thunderbio
	                        3' RNA-seq, Reverse for 5' RNA-seq (Forward)
	  --config              Provide a custom nextflow config file to
	                        define all parameters
	  --executor            Define executor of nextflow (local), see:
	                        https://www.nextflow.io/docs/latest/executor.html
	  --cpus                CPUs to use for all processes (8)
	  --mem                 Memory to use for all processes, please note
	                        the special format (32.GB)
	  --noDepCheck          Do not check Java and nextflow before
	                        running (false)
	  -bg                   Running the pipeline in background (false)
	
	EOF

    exit 0
}

mkref_usage(){
    cat <<-EOF
	Basic Usage:
	===========
	starscope <mkref> --conda \\
	                  --genomeFasta /path/to/genome/fasta \\
	                  --genomeGTF /path/to/genome/gtf \\
	                  --refoutDir reference_out_dir
	
	options:
	  --conda           Use conda env to run (true)
	  --genomeFasta     Path of reference FASTA file
	  --genomeGTF       Path of reference GTF file
	  --outdir          publish dir path (results)
	  --refoutDir       output reference dir name (STAR_reference),
	                    note the final reference will locate in
	                    outdir/refoutDir, which by default is
	                    results/STAR_reference
	  --config          Provide a custom nextflow config file to
	                    define all parameters
	  --executor        Define executor of nextflow (local), see:
	                    https://www.nextflow.io/docs/latest/executor.html
	  --cpus            CPUs to use for all processes (8)
	  --mem             Memory to use for all processes, please note
	                    the special format (40.GB)
	  --noDepCheck      Do not check Java and nextflow before
	                    running (false)
	  -bg               Running the pipeline in background (false)
	
	EOF

    exit 0
}

vdj_gex_usage(){
    cat<<-EOF
	Basic Usage:
	===========
	Example sampleList.csv:
	sample,fastq_1,fastq_2,feature_types
	vdj_sample1,gex.R1.fq.gz,gex.R2.fq.gz,GEX
	vdj_sample1,t.R1.fq.gz,t.R2.fq.gz,VDJ-T
	vdj_sample1,b.R1.fq.gz,b.R2.fq.gz,VDJ-B
	
	starscope <vdj_gex> --conda \\
	                    --input sampleList.csv \\
	                    --genomeDir /path/to/STAR/reference/dir \\
	                    --genomeGTF /path/to/genomeGTF \\
	                    --whitelist /path/to/whitelist \\
	                    --trust4_vdj_refGenome_fasta /path/to/refGenome_vdj_fasta \\
	                    --trust4_vdj_imgt_fasta /path/to/imgt_vdj_fasta \\
	                    --trimLength 28 \\
	                    --soloCBstart 1 \\
	                    --soloCBlen 29 \\
	                    --soloUMIstart 30 \\
	                    --soloUMIlen 10
	
	options:
	  --conda               Use conda env to run (true)
	  --docker              Use docker container to run
	  --input               Input sample list, csv format, required
	                        columns include "sample" for sampleName,
	                        "fastq_1" for read1, "fastq_2" for read2,
	                        "feature_types" for library type
	                        (GEX/VDJ-T/VDJ-B), and read1 is assumed
	                        to contain cell barcode.
	  --genomeDir           Path of STAR reference directory
	  --genomeGTF           Path of reference genome GTF file
	  --whitelist           Path of whitelist of barcodes
	  --trimLength          Min read length retained after cutadapt
	                        trimming (28)
	  --soloCBstart         Cell barcode start base in read1 (1)
	  --soloCBlen           Cell barcode length (29)
	  --soloUMIstart        UMI start base in read1 (30)
	  --soloUMIlen          UMI length (10)
	  --soloFeatures        Define whether only count UMI in exon region:
	                        Gene or GeneFull which includes both exon and
	                        intron reads (GeneFull)
	  --soloMultiMappers    Counting method for reads mapping to multiple genes:
	                        Unique or EM (Unique)
	  --config              Provide a custom nextflow config file to
	                        define all parameters
	  --executor            Define executor of nextflow (local), see:
	                        https://www.nextflow.io/docs/latest/executor.html
	  --cpus                CPUs to use for all processes (8)
	  --mem                 Memory to use for all processes, please note
	                        the special format (32.GB)
	  --noDepCheck          Do not check Java and nextflow before
	                        running (false)
	  -bg                   Running the pipeline in background (false)
	EOF
}

check_version_usage(){
    cat <<-EOF
	Basic Usage:
	===========
	starscope <check_version> [--conda|--docker]
	
	options:
	  --conda     print program version of conda env
	  --docker    print program version in docker container
	EOF
}

check_java(){
    ## Check if java is installed
    echo "Checking Java..."
    if [[ -z $(which java) ]]
    then
        echo_stderr "Please install java 8 or higher"
        exit 1
    else
        java_version_string=$(java -version 2>&1 | head -1)
        java_version=$(echo $java_version_string | awk '{gsub("\"", "", $3);split($3,tmp,"."); if(tmp[1]==1){print tmp[1]"."tmp[2]}
else{print tmp[1]}}')

        if [[ $java_version == "1.8" ]] || [[ $java_version -ge 9 ]]
        then
            echo -e "Java version: ${BRed}$java_version_string${NC}"
        else
            echo_stderr "Please install java 8 or higher"
            exit 1
        fi
    fi
}

check_nextflow(){
    ## Check if nextflow is installed
    echo "Checking nextflow..."
    if [[ -z $(which nextflow) ]]
    then
        echo "No nextflow detected, installing..."
        curl -s https://get.nextflow.io | bash
        nextflow="./nextflow"
        nextflow_version=$($nextflow -v)
        echo "Nextflow downloaded in the current directory: $nextflow_version"
        echo "Please move nextflow executable file to your PATH directory."
    else
        echo -e "Nextflow installed: ${BRed}$(which nextflow)${NC}"
        nextflow="nextflow"
        nextflow_version=$($nextflow -v | awk '{print $3}')
        echo -e "nextflow version: ${BRed}$nextflow_version${NC}"
    fi
}

check_conda(){
    ## Check if conda is installed
    ## Check if env is ready
    conda_env_name=$(head -1 $DIR/scRNA-seq/scRNAseq_env.yml| awk '{print $2}')
    echo "Checking conda and conda env..."
    if [[ -z $(which micromamba) ]] && [[ -z $(which mamba) ]] && [[ -z $(which conda) ]]
    then
        echo_stderr "Please install conda first: https://docs.conda.io/en/latest/miniconda.html"
        exit 1
    else
        echo -e "Conda installed: ${BRed}$(which conda)${NC}"
        if [[ -n $(which micromamba) ]]
        then
            conda_env=$(micromamba env list | awk '$1!~/^#/ && $NF~/'$conda_env_name'/{print $NF}')
        elif [[ -n $(which mamba) ]]
        then
            conda_env=$(mamba env list | awk '$1!~/^#/ && $NF~/'$conda_env_name'/{print $NF}')
        elif [[ -n $(which conda) ]]
        then
            conda_env=$(conda env list | awk '$1!~/^#/ && $NF~/'$conda_env_name'/{print $NF}')
        fi
        if [[ -z $conda_env ]]
        then
            echo_stderr "Preparing conda env..."
            ## use mamba if installed
            if [[ -n $(which micromamba) ]]
            then
                micromamba env create -f $DIR/scRNA-seq/scRNAseq_env.yml # mamba install
            elif [[ -n $(which mamba) ]]
            then
                mamba env create -f $DIR/scRNA-seq/scRNAseq_env.yml
            else
                conda env create -f $DIR/scRNA-seq/scRNAseq_env.yml # create env
            fi
        fi
        conda_env_path=$(conda env list | awk '$1!~/^#/ && $NF~/'$conda_env_name'/{print $NF}')
        echo -e "Detected conda env: ${BRed}$conda_env_path${NC}"
    fi
}

check_docker(){
    echo "Checking docker and docker image..."
    if [[ -z $(which docker) ]]
    then
        echo_stderr "Please install docker first: https://get.docker.com/"
        exit 1
    elif [[ $(docker info | grep -c "Docker Root Dir") == 1 ]]
    then
        ## ensure image is pulled and up-to-date
        echo "Pulling image..."
        docker_image="registry-intl.cn-hangzhou.aliyuncs.com/thunderbio/thunderbio_scrnaseq_env:2.7.10a"
        echo -e "Image used: ${BRed}$docker_image${NC}"
        docker pull $docker_image
    else
        echo_stderr "It seems that docker daemon is not running?..."
        exit 1
    fi
}

check_version(){
    ## read parameters
    case $1 in
        "" | "-h" | "-help" | "--help")
            check_version_usage
            exit 0
            ;;
        "--conda")
            local run_env="conda"
            shift 1
            ;;
        "--docker")
            local run_env="docker"
            shift 1
            ;;
        *)
            echo_stderr "Only support conda and docker running env now..."
            exit 1
            ;;
    esac
    check_java
    check_nextflow
    ## https://superuser.com/questions/360966/how-do-i-use-a-bash-variable-string-containing-quotes-in-a-command
    R_cmd=(Rscript -e 'options(warn=-1);suppressMessages({library(tidyverse);library(scales);library(jsonlite);library(Seurat);library(future);library(DT);library(plotly);library(kableExtra);library(flexdashboard);});sessionInfo()')
    if [[ $run_env == "conda" ]]
    then
        check_conda
        cutadapt_version=$(conda run -n $conda_env_name cutadapt --version | sed '/^$/d')
        fastqc_version=$(conda run -n $conda_env_name fastqc --version | awk '{print $2}')
        star_version=$(conda run -n $conda_env_name STAR --version)
        samtools_version=$(conda run -n $conda_env_name samtools --version | head -1 |awk '{print $2}')
        bedtools_version=$(conda run -n $conda_env_name bedtools --version | awk '{print $2}')
        qualimap_version=$(conda run -n $conda_env_name qualimap -h | awk '$1=="QualiMap"{print $2}')
        printf "%80s\n" | tr " " "="
        cat <<-EOF
		starscope: $(echo -e "${BBlue}${starscope_version}${NC}")
		cutadapt: $(echo -e "${BBlue}${cutadapt_version}${NC}")
		fastqc: $(echo -e "${BBlue}${fastqc_version}${NC}")
		samtools: $(echo -e "${BBlue}${samtools_version}${NC}")
		bedtools: $(echo -e "${BBlue}${bedtools_version}${NC}")
		STAR: $(echo -e "${BBlue}${star_version}${NC}")
		qualimap: $(echo -e "${BBlue}${qualimap_version}${NC}")
		EOF
        printf "%80s\n" | tr " " "="
        echo "R sessionInfo:"
        echo ""
        conda run -n $conda_env_name "${R_cmd[@]}"
        printf "%80s\n" | tr " " "="
        echo "Conda Info:"
        conda info

    elif [[ $run_env == "docker" ]]
    then
        check_docker
        cutadapt_version=$(docker run --rm $docker_image cutadapt --version)
        fastqc_version=$(docker run --rm $docker_image fastqc --version | awk '{print $2}')
        star_version=$(docker run --rm $docker_image STAR --version)
        samtools_version=$(docker run --rm $docker_image samtools --version 2> /dev/null | head -1 |awk '{print $2}')
        bedtools_version=$(docker run --rm $docker_image bedtools --version | awk '{print $2}')
        qualimap_version=$(docker run --rm $docker_image qualimap -h | awk '$1=="QualiMap"{print $2}')
        printf "%80s\n" | tr " " "="
        cat <<-EOF
		starscope: $(echo -e "${BBlue}${starscope_version}${NC}")
		cutadapt: $(echo -e "${BBlue}${cutadapt_version}${NC}")
		fastqc: $(echo -e "${BBlue}${fastqc_version}${NC}")
		samtools: $(echo -e "${BBlue}${samtools_version}${NC}")
		bedtools: $(echo -e "${BBlue}${bedtools_version}${NC}")
		STAR: $(echo -e "${BBlue}${star_version}${NC}")
		qualimap: $(echo -e "${BBlue}${qualimap_version}${NC}")
		EOF
        printf "%80s\n" | tr " " "="
        echo "R sessionInfo:"
        echo ""
        docker run --rm $docker_image "${R_cmd[@]}"
        printf "%80s\n" | tr " " "="
        echo "Docker Info:"
        docker info
    fi
}

run(){
    ## run the pipeline
    ## set default value of some parameters
    local nextflowOpt=""
    local run_cpus=8
    local run_mem="32.GB"
    local run_env="conda" # conda as default
    local executor="local"
    local noDepCheck=false

    ## if no parameter provided to run command
    ## print help message
    if [[ -z $1 ]]
    then
        run_usage
        exit 0
    fi
    ## read parameters
    while [[ ! -z $1 ]]
    do
        case $1 in
            "" | "-h" | "-help" | "--help")
                run_usage
                exit 0
                ;;
            "--config")
                local configFile=$2
                shift 2
                ;;
            "--conda")
                local run_env="conda"
                shift 1
                ;;
            "--docker")
                local run_env="docker"
                shift 1
                ;;
            "--executor")
                local executor=$2
                shift 2
                ;;
            "--cpus")
                local run_cpus=$2
                shift 2
                ;;
            "--mem")
                local run_mem=$2
                shift 2
                ;;
            "--noDepCheck")
                local noDepCheck=true
                shift 1
                ;;
            *)
                nextflowOpt="$nextflowOpt $1"
                shift 1
                ;;
        esac
    done

    ## check dependency
    if [[ $noDepCheck == false ]]
    then
        check_java
        check_nextflow
    fi
    ## make process config file
    if [[ -z $configFile ]]
    then
        configFile=$(mktemp)
        if [[ $run_env == "conda" ]]
        then
            check_conda
            cat <<-EOF > $configFile
			process {
			  executor = "$executor"
			  cpus   = $run_cpus
			  memory = $run_mem
			  conda = "$conda_env_path"
			}
			conda.enabled = true
			EOF
        elif [[ $run_env == "docker" ]]
        then
            check_docker
            cat <<-EOF > $configFile
			process {
			  executor = "$executor"
			  cpus   = $run_cpus
			  memory = $run_mem
			  container = "$docker_image"
			}
			docker.enabled = true
			docker.userEmulation = true
			docker.runOptions = '-u $(id -u):$(id -g) --init'
			EOF
            echo ""
        else
            echo_stderr "run env only support conda and docker for now."
            exit 1
        fi
    fi

    echo "Using local config as : $configFile"
    echo "nextflow command:"
    echo "nextflow run scRNA-seq -c $configFile $nextflowOpt"
    $nextflow run $DIR/scRNA-seq -c $configFile $nextflowOpt
}

vdj_gex(){
    ## run the pipeline
    ## set default value of some parameters
    local nextflowOpt=""
    local run_cpus=8
    local run_mem="32.GB"
    local run_env="conda" # conda as default
    local executor="local"
    local noDepCheck=false

    ## if no parameter provided to run command
    ## print help message
    if [[ -z $1 ]]
    then
        vdj_gex_usage
        exit 0
    fi
    ## read parameters
    while [[ ! -z $1 ]]
    do
        case $1 in
            "" | "-h" | "-help" | "--help")
                vdj_gex_usage
                exit 0
                ;;
            "--config")
                local configFile=$2
                shift 2
                ;;
            "--conda")
                local run_env="conda"
                shift 1
                ;;
            "--docker")
                local run_env="docker"
                shift 1
                ;;
            "--executor")
                local executor=$2
                shift 2
                ;;
            "--cpus")
                local run_cpus=$2
                shift 2
                ;;
            "--mem")
                local run_mem=$2
                shift 2
                ;;
            "--noDepCheck")
                local noDepCheck=true
                shift 1
                ;;
            *)
                nextflowOpt="$nextflowOpt $1"
                shift 1
                ;;
        esac
    done

    ## check dependency
    if [[ $noDepCheck == false ]]
    then
        check_java
        check_nextflow
    fi
    ## make process config file
    if [[ -z $configFile ]]
    then
        configFile=$(mktemp)
        if [[ $run_env == "conda" ]]
        then
            check_conda
            cat <<-EOF > $configFile
			process {
			  executor = "$executor"
			  cpus   = $run_cpus
			  memory = $run_mem
			  conda = "$conda_env_path"
			}
			EOF
        elif [[ $run_env == "docker" ]]
        then
            check_docker
            cat <<-EOF > $configFile
			process {
			  executor = "$executor"
			  cpus   = $run_cpus
			  memory = $run_mem
			  container = "$docker_image"
			}
			docker.enabled = true
			docker.userEmulation = true
			docker.runOptions = '-u $(id -u):$(id -g) --init'
			EOF
            echo ""
        else
            echo_stderr "run env only support conda and docker for now."
            exit 1
        fi
    fi

    echo "Using local config as : $configFile"
    echo "nextflow command:"
    echo "nextflow run scRNA-seq -c $configFile $nextflowOpt"
    $nextflow run $DIR/scRNA-seq -c $configFile -entry vdj $nextflowOpt
}

mkref(){
    ## run the pipeline
    ## set default value of some parameters
    local nextflowOpt=""
    local run_cpus=8
    local run_mem="40.GB"
    local run_env="conda" # conda as default
    local executor="local"
    local noDepCheck=false

    ## if no parameter provided to run command
    ## print help message
    if [[ -z $1 ]]
    then
        mkref_usage
        exit 0
    fi
    ## read parameters
    while [[ ! -z $1 ]]
    do
        case $1 in
            "" | "-h" | "-help" | "--help")
                mkref_usage
                exit 0
                ;;
            "--config")
                local configFile=$2
                shift 2
                ;;
            "--conda")
                ##check_conda
                local run_env="conda"
                shift 1
                ;;
            "--docker")
                local run_env="docker"
                shift 1
                ;;
            "--executor")
                local executor=$2
                shift 2
                ;;
            "--cpus")
                local run_cpus=$2
                shift 2
                ;;
            "--mem")
                local run_mem=$2
                shift 2
                ;;
            "--noDepCheck")
                local noDepCheck=true
                shift 1
                ;;
            *)
                nextflowOpt="$nextflowOpt $1"
                shift 1
                ;;
        esac
    done

    ## check dependency
    if [[ $noDepCheck == false ]]
    then
        check_java
        check_nextflow
    fi
    ## make process config file
    if [[ -z $configFile ]]
    then
        configFile=$(mktemp)
        if [[ $run_env == "conda" ]]
        then
            check_conda
            cat <<-EOF > $configFile
			process {
			  executor = "$executor"
			  cpus   = $run_cpus
			  memory = $run_mem
			  conda = "$conda_env_path"
			}
			EOF
        elif [[ $run_env == "docker" ]]
        then
            check_docker
            cat <<-EOF > $configFile
			process {
			  executor = "$executor"
			  cpus   = $run_cpus
			  memory = $run_mem
			  container = "$docker_image"
			}
			docker.enabled = true
			docker.userEmulation = true
			docker.runOptions = '-u $(id -u):$(id -g) --init'
			EOF
            echo ""
        else
            echo_stderr "run env only support conda and docker for now."
            exit 1
        fi
    fi

    echo "Using local config as : $configFile"
    echo "nextflow command:"
    echo "nextflow run scRNA-seq -c $configFile -entry mkref $nextflowOpt"
    $nextflow run $DIR/scRNA-seq -c $configFile -entry mkref $nextflowOpt

}

if [[ -z $1 ]]
then
    subcommand=""
else
    subcommand=$1
    shift 1;
fi

## Added version number here
starscope_version=$(grep "manifest.version" $DIR/scRNA-seq/nextflow.config | awk '{print $NF}' | sed 's/\"//g')

case $subcommand in
    "" | "-h" | "--help" | "-help")
        usage
        ;;
    "run")
        run $@
        ;;
    "mkref")
        mkref $@
        ;;
    "vdj_gex")
        vdj_gex $@
        ;;
    "check_version")
        check_version $@
        ;;
    "-v" | "--version" | "-version")
        echo "starscope $starscope_version"
        ;;
    *)
        echo_stderr "Please provide valid subcommand: run, mkref, vdj_gex or check_version"
        exit 1
        ;;
esac
